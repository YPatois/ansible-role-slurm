---
  - name: slurm_mysql_password variable must be set
    assert:
      that: "slurm_mysql_password is defined"

####

  - name: install slurmdbd packages
    package: name="{{ slurmdbd_packages }}" state=present
    register: reg_install_slurm_packages
    when: ansible_os_family == "RedHat"

#  - name: install slurmdbd specific packages for fgci repo
#    package: name="{{ slurmdbd_packages_fgci_repo }}" state=present
#    register: reg_install_slurm_packages
#    when: ansible_os_family == "RedHat" and slurm_repo == "fgci"

#  - name: install slurmdbd specific packages for ohpc repo
#    package: name="{{ slurmdbd_packages_ohpc_repo }}" state=present
#    register: reg_install_slurm_packages
#    when: ansible_os_family == "RedHat" and slurm_repo == "ohpc"

  - name: start and enable mariadb/mysql
    service: name={{ slurm_sql_service }} state=started enabled=yes
    when: ansible_os_family == "RedHat"

  - name: restart mariadb/mysql after install
    service: name={{ slurm_sql_service }} state=restarted
    when: reg_install_slurm_packages.changed

  - name: wait for mysql in port 3306 to start
    wait_for: port=3306 delay=10 timeout=60

  #- name: Set root sql user password
    ## If .my.cnf already exists, this will cause an mysql-root-password update.
    ## check_implicit_admin means it tries without password first
    #mysql_user:
      #name: root
      #password: "{{ DB_root_password}}"
      #check_implicit_admin: true
      #host: "{{ item }}"
    #with_items:
       #- "::1"
       #- "127.0.0.1"
       #- "localhost"
    #when: slurm_manage_mysql_security|bool and not ansible_check_mode

  #- name: Set root sql user password check mode
    #mysql_user:
      #name: root
      #password: "{{ DB_root_password}}"
      #check_implicit_admin: false
      #host: "{{ item }}"
    #with_items:
       #- "::1"
       #- "127.0.0.1"
       #- "localhost"
    #when: slurm_manage_mysql_security|bool and ansible_check_mode

    
  - name: template .my.cnf
    template:
     src: ".my.cnf.j2"
     dest: "/root/.my.cnf"
     owner: root
     group: root
     mode: 0600
    when: slurm_manage_mysql_security|bool

  - name: delete anonymous sql server user for localhost
    mysql_user: user="" state=absent
    when: slurm_manage_mysql_security|bool

  - name: remove the mysql test database
    mysql_db: db=test state=absent
    when: slurm_manage_mysql_security|bool

  - name: create slurm acct db
    mysql_db: name=slurm_acct_db state=present
    when: slurm_manage_mysql_security|bool

  - name: create slurm sql user
    mysql_user: 
     name: slurm 
     state: present 
     password: "{{ slurm_mysql_password }}"
    register: mysqlslurmuser
    ignore_errors: yes
    tags: debug

  - name: print mysqlslurmuser
    debug: var=mysqlslurmuser verbosity=1
    tags: debug
    changed_when: False

  - name: ensure slurm sql user has a password and privileges if it does not exist or if it was just added
    mysql_user: 
     name: slurm
     password: "{{ slurm_mysql_passwordÂ }}"
     priv: "slurm_acct_db.*:ALL"
     state: present 
     update_password: always
    when: mysqlslurmuser is failed or mysqlslurmuser is changed

  - name: template in slurmdbd.conf
    template: 
     src: slurmdbd.conf.j2 
     dest: /etc/slurm/slurmdbd.conf 
     owner: slurm 
     mode: 0600 
     backup: yes
    notify:
      - restart slurmdbd

  - name: template in dump-all-databases.sh
    template: src=dump-all-databases.sh.j2 dest=/usr/local/sbin/dump-all-databases.sh owner=root mode=0750 backup=no

  - name: create systemd override directories for slurmdbd
    file: path="/etc/systemd/system/slurmdbd.service.d" state=directory owner=root mode=0755
    when: slurm_systemd_override_slurmdbd and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"
    
  - name: template in systemd override file for slurmdbd
    template: src=systemd_override.conf.j2 dest=/etc/systemd/system/slurmdbd.service.d/slurmdbd_override.conf backup=no owner=root mode=0644
    when: slurm_systemd_override_slurmdbd and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

